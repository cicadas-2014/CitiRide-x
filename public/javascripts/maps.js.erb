function initialize(coords, addresses, startStation, destinationStation) {
  var myLatlng = new google.maps.LatLng((coords[0][0]+coords[3][0])/2,(coords[0][1]+coords[3][1])/2);
  var mapOptions = {
    zoom: 14,
    center: myLatlng
  }
  console.log(addresses)
  console.log(startStation)
  console.log(destinationStation)

  map = new google.maps.Map(document.getElementById('map'), mapOptions);
  displayRoute1walk(coords[0],coords[1], addresses[0]);
  displayRoutebike(coords[1],coords[2], startStation, destinationStation);
  displayRoute2walk(coords[2],coords[3], addresses[1]);
}

function displayRoute1walk(start,start_station, startAddress) {
  var directionsService = new google.maps.DirectionsService();
  var myLatlng = new google.maps.LatLng(start[0],start[1]);

  var myLatlng2 = new google.maps.LatLng(start_station[0],start_station[1]);

  var directionsDisplay = new google.maps.DirectionsRenderer();

  directionsDisplay.setMap(map);

  var request = {
    origin : myLatlng,
    destination : myLatlng2,
    travelMode : google.maps.TravelMode.WALKING
  };
  directionsService.route(request, function(response, status) {
    if (status == google.maps.DirectionsStatus.OK) {
      directionsDisplay.setOptions({ preserveViewport: true });
      directionsDisplay.setDirections(response);
      directionsDisplay.setOptions( {suppressMarkers: true})
      showStepsRoute1Walk(response, startAddress);
    }
  });
}


function displayRoutebike(start_station, next_station, startStationJson, destinationStationJson) {
  var directionsService = new google.maps.DirectionsService();
  var myLatlng = new google.maps.LatLng(start_station[0],start_station[1]);

  var myLatlng2 = new google.maps.LatLng(next_station[0],next_station[1]);


  var directionsDisplay = new google.maps.DirectionsRenderer();

  directionsDisplay.setMap(map);

  var request = {
    origin : myLatlng,
    destination : myLatlng2,
    travelMode : google.maps.TravelMode.BICYCLING
  };
  directionsService.route(request, function(response, status) {
    if (status == google.maps.DirectionsStatus.OK) {
      directionsDisplay.setOptions({ preserveViewport: true });
      directionsDisplay.setDirections(response);
      directionsDisplay.setOptions( {suppressMarkers: true})
      showStepsRouteBike(response, startStationJson, destinationStationJson);
    }
  });
}

function showStepsRouteBike(directionResult, startStation, destinationStation) {

  var station_infowindow = new google.maps.InfoWindow({

  });
  var myRoute = directionResult.routes[0].legs[0];

  for (var i = 0; i < myRoute.steps.length; i++) {
    // var assetPath = "<%= asset_path 'stations/map-icons.png' %>";
    var icon1 = new google.maps.MarkerImage(
      // "<%= image_path('map-icons.png') %>",
      '/images/map-icons.png',
      new google.maps.Size(42,53),
      new google.maps.Point(0,sprite_offset(startStation.availableBikes,startStation.availableDocks)),
      new google.maps.Point(22,53)
      );

    if (i == 0) {
    //Icon as start position
    // icon = "https://chart.googleapis.com/chart?chst=d_map_xpin_icon&chld=pin_star|car-dealer|00FFFF|FF0000";
    var marker = new google.maps.Marker({
      position: myRoute.steps[i].start_point, 
      map: map,
      icon: icon1
    });

    // Create an Event Listener that pops up the infoWindow when a user clicks a station
    google.maps.event.addListener(marker, 'click', function() {
      contentString='<div class="station-window" style="width: 20%, margin: 0">' +
                          // Sets a temporary padding, this helps the station name stay on all one line. Google maps doesn't like the text-transform:uppercase without this
                          '<h2 class="temp-padding" style="margin: 0">' + startStation.stationName + '</h2>' +
                            //if the station is planned, put up a small message saying it is planned, if not, put the table up
                            (startStation.statusValue == 'Planned' ? "<i>(planned station)</i>" :
                                //if we have don't have sponsorship info:....
                                '<div class="station-data">' +
                                '<b>Available Bikes: </b>' + startStation.availableBikes + '<br>' +
                                '<b>Available Docks: </b>' + startStation.availableDocks + '<br>' +
                                // '<table id="station-table">' + 
                                // '<tr><th>Available Bikes:</th><td>' + startStation.availableBikes + '</td></tr>' +
                                // '<tr><th>Available Docks:</th><td>' + startStation.availableDocks + '</td></tr>' +
                                // '</table>'  +
                                '</div>'
                                ) +
                            '</div>';

                // This code helps prevent scroll-bars. Create an element, put the content in the element, then put the element in the window (below)
                var div = document.createElement('div');
                div.innerHTML = contentString;

                // Set the content in the infowindow
                station_infowindow.setContent(div);

                // Open the InfoWindow
                station_infowindow.open(map, marker);

                // Create an event listener that runs when the infowindow is fully popped-up. This is so we can reset the margins
                google.maps.event.addListener(station_infowindow, 'domready', function() {
                  // Resets the h2 padding back to zero
                  $('.temp-padding').css('padding-right', '0');

                  // Get the height of the table, to base the margin of the image and the table off of one another
                  var table_height = $('#station-table').height()/2;

                  // Set the top margin of the table to a relative value of the image size, if the table is smaller than the image
                  var table_margin = ($('.sponsor-img').attr("height") - table_height) / 2;
                  table_margin = Math.max(table_margin, 0);
                  $('.station-data-w-table').css('margin-top', table_margin);

                  // // Set the top margin of the image to a relative value of the table size, if the image is smaller than the table
                  // var img_margin = (table_height - $('.sponsor-img').attr("height")) / 2;
                  // img_margin = Math.max(img_margin, 0);
                  // $('.sponsor-img').css('margin-top', img_margin);
                });
                // End of infowindow domready event listener
              });
}
}
//Icon as end position

var icon2 = new google.maps.MarkerImage(
      // "<%= image_path('map-icons.png') %>",
      '/images/map-icons.png',
      new google.maps.Size(42,53),
      new google.maps.Point(0,sprite_offset(destinationStation.availableBikes,destinationStation.availableDocks)),
      new google.maps.Point(22,53)
      );

var marker2 = new google.maps.Marker({
  position: myRoute.steps[i - 1].end_point, 
  map: map,
  icon: icon2
});

google.maps.event.addListener(marker2, 'click', function() {
  contentString='<div class="station-window">' +
                          // Sets a temporary padding, this helps the station name stay on all one line. Google maps doesn't like the text-transform:uppercase without this
                          '<h2 class="temp-padding" style="margin: 0">' + destinationStation.stationName + '</h2>' +
                            //if the station is planned, put up a small message saying it is planned, if not, put the table up
                            (destinationStation.statusValue == 'Planned' ? "<i>(planned station)</i>" :
                                //if we have don't have sponsorship info:....
                                    '<div class="station-data">' +
                                '<b>Available Bikes: </b>' + startStation.availableBikes + '<br>' +
                                '<b>Available Docks: </b>' + startStation.availableDocks + '<br>' +
                                // '<table id="station-table">' + 
                                // '<tr><th>Available Bikes:</th><td>' + startStation.availableBikes + '</td></tr>' +
                                // '<tr><th>Available Docks:</th><td>' + startStation.availableDocks + '</td></tr>' +
                                // '</table>'  +
                                '</div>'
                                ) +
                            '</div>';

                // This code helps prevent scroll-bars. Create an element, put the content in the element, then put the element in the window (below)
                var div = document.createElement('div');
                div.innerHTML = contentString;

                // Set the content in the infowindow
                station_infowindow.setContent(div);

                // Open the InfoWindow
                station_infowindow.open(map, marker2);

                // Create an event listener that runs when the infowindow is fully popped-up. This is so we can reset the margins
                google.maps.event.addListener(station_infowindow, 'domready', function() {
                  // Resets the h2 padding back to zero
                  $('.temp-padding').css('padding-right', '0');

                  // Get the height of the table, to base the margin of the image and the table off of one another
                  var table_height = $('#station-table').height();

                  // Set the top margin of the table to a relative value of the image size, if the table is smaller than the image
                  var table_margin = ($('.sponsor-img').attr("height") - table_height) / 2;
                  table_margin = Math.max(table_margin, 0);
                  $('.station-data-w-table').css('margin-top', table_margin);

                  // // Set the top margin of the image to a relative value of the table size, if the image is smaller than the table
                  // var img_margin = (table_height - $('.sponsor-img').attr("height")) / 2;
                  // img_margin = Math.max(img_margin, 0);
                  // $('.sponsor-img').css('margin-top', img_margin);
                });
                // End of infowindow domready event listener
              });

}

function showStepsRoute1Walk(directionResult, startAddress) {

  var station_infowindow = new google.maps.InfoWindow({

  }); 
  var myRoute = directionResult.routes[0].legs[0];

  for (var i = 0; i < myRoute.steps.length; i++) {
    // var assetPath = "<%= asset_path 'stations/map-icons.png' %>";
    
    var icon = 'https://chart.googleapis.com/chart?chst=d_map_pin_letter&chld=A|FFFFFF|000000';

    if (i == 0) {
    //Icon as start position
    // icon = "https://chart.googleapis.com/chart?chst=d_map_xpin_icon&chld=pin_star|car-dealer|00FFFF|FF0000";
    var marker = new google.maps.Marker({
      position: myRoute.steps[i].start_point, 
      map: map,
      icon: icon
    });

    // Create an Event Listener that pops up the infoWindow when a user clicks a station
    google.maps.event.addListener(marker, 'click', function() {
      contentString='<div class="station-window"  style="width: 20%, margin: 0">' +
                          // Sets a temporary padding, this helps the station name stay on all one line. Google maps doesn't like the text-transform:uppercase without this
                          '<h2 class="temp-padding" style="padding-right: 1.5em">' + startAddress + '</h2>' +
                            //if the station is planned, put up a small message saying it is planned, if not, put the table up
                            
                            '<table id="station-table">' + 
                            '</table>'  +
                            '</div>';

                // This code helps prevent scroll-bars. Create an element, put the content in the element, then put the element in the window (below)
                var div = document.createElement('div');
                div.innerHTML = contentString;

                // Set the content in the infowindow
                station_infowindow.setContent(div);

                // Open the InfoWindow
                station_infowindow.open(map, marker);

                // Create an event listener that runs when the infowindow is fully popped-up. This is so we can reset the margins
                google.maps.event.addListener(station_infowindow, 'domready', function() {
                  // Resets the h2 padding back to zero
                  $('.temp-padding').css('padding-right', '0');

                  // Get the height of the table, to base the margin of the image and the table off of one another
                  var table_height = $('#station-table').height();

                  // Set the top margin of the table to a relative value of the image size, if the table is smaller than the image
                  var table_margin = ($('.sponsor-img').attr("height") - table_height) / 2;
                  table_margin = Math.max(table_margin, 0);
                  $('.station-data-w-table').css('margin-top', table_margin);

                  // // Set the top margin of the image to a relative value of the table size, if the image is smaller than the table
                  // var img_margin = (table_height - $('.sponsor-img').attr("height")) / 2;
                  // img_margin = Math.max(img_margin, 0);
                  // $('.sponsor-img').css('margin-top', img_margin);
                });
                // End of infowindow domready event listener
              });
}
  // attachInstructionText(marker, myRoute.steps[i].instructions);
  // markerArray.push(marker);
}

}

function showStepsRoute2Walk(directionResult, destination) {

  var station_infowindow = new google.maps.InfoWindow({

  });
  var myRoute = directionResult.routes[0].legs[0];

  for (var i = 0; i < myRoute.steps.length; i++) {
    var icon = 'https://chart.googleapis.com/chart?chst=d_map_pin_letter&chld=B|FFFFFF|000000';

    if (i == myRoute.steps.length-1) {
    //Icon as start position
    var marker = new google.maps.Marker({
      position: myRoute.steps[i].start_point, 
      map: map,
      icon: icon
    });
      // Create an Event Listener that pops up the infoWindow when a user clicks a station
      google.maps.event.addListener(marker, 'click', function() {
        contentString='<div class="station-window" style="width: 20%, margin: 0">' +
                          // Sets a temporary padding, this helps the station name stay on all one line. Google maps doesn't like the text-transform:uppercase without this
                          '<h2 class="temp-padding" style="padding-right: 1.5em">' + destination + '</h2>' +
                            //if the station is planned, put up a small message saying it is planned, if not, put the table up
                            
                            '<table id="station-table">' + 
                            '</table>'  +
                            '</div>';

                // This code helps prevent scroll-bars. Create an element, put the content in the element, then put the element in the window (below)
                var div = document.createElement('div');
                div.innerHTML = contentString;

                // Set the content in the infowindow
                station_infowindow.setContent(div);

                // Open the InfoWindow
                station_infowindow.open(map, marker);

                // Create an event listener that runs when the infowindow is fully popped-up. This is so we can reset the margins
                google.maps.event.addListener(station_infowindow, 'domready', function() {
                  // Resets the h2 padding back to zero
                  $('.temp-padding').css('padding-right', '0');

                  // Get the height of the table, to base the margin of the image and the table off of one another
                  var table_height = $('#station-table').height();

                  // Set the top margin of the table to a relative value of the image size, if the table is smaller than the image
                  var table_margin = ($('.sponsor-img').attr("height") - table_height) / 2;
                  table_margin = Math.max(table_margin, 0);
                  $('.station-data-w-table').css('margin-top', table_margin);

                  // // Set the top margin of the image to a relative value of the table size, if the image is smaller than the table
                  // var img_margin = (table_height - $('.sponsor-img').attr("height")) / 2;
                  // img_margin = Math.max(img_margin, 0);
                  // $('.sponsor-img').css('margin-top', img_margin);
                });
                // End of infowindow domready event listener
              });
}



  // attachInstructionText(marker, myRoute.steps[i].instructions);
  // markerArray.push(marker);
}

}

function displayRoute2walk(next_station, destination, destinationAddress) {
  var directionsService = new google.maps.DirectionsService();
  var myLatlng = new google.maps.LatLng(next_station[0],next_station[1]);


  var myLatlng2 = new google.maps.LatLng(destination[0],destination[1]);

  var directionsDisplay = new google.maps.DirectionsRenderer();


  directionsDisplay.setMap(map);

  var request = {
    origin : myLatlng,
    destination : myLatlng2,
    travelMode : google.maps.TravelMode.WALKING
  };

  directionsService.route(request, function(response, status) {
    if (status == google.maps.DirectionsStatus.OK) {
      directionsDisplay.setOptions({ preserveViewport: true });
      directionsDisplay.setDirections(response);
      directionsDisplay.setOptions( {suppressMarkers: true})
      showStepsRoute2Walk(response, destinationAddress);
    }
  });
}

function sprite_offset(bikes,docks) {
  var index_offset=5;  
  
      // Only if the station is not reporting 0 bikes and 0 docks
      if (!(bikes==0 && docks==0)) 
      {
        var percent=Math.round(bikes/(bikes+docks)*100);

        // Use the empty icon only for empty stations, ditto for full. Anything in-between, show different icon
        if (percent==0)
          index_offset=0;
        else if (percent>0 && percent<=33)
          index_offset=1;
        else if (percent>33 && percent<67)
          index_offset=2;
        else if (percent>=67 && percent<100)
          index_offset=3;
        else if (percent==100)
          index_offset=4;
      }

        var offset=index_offset*(53+50); //53 the height of the pin portion of the image, 50 the whitespace b/t the pin portions
        return offset;
      }


      function renderMap(coords, addresses, startStation, destinationStation) {
        google.maps.event.addDomListener(window, 'load', initialize(coords, addresses, startStation, destinationStation));
      }

